---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-supported-versions-action
name: "🐍 Extract Python Versions Supported by Project"
description: "Returns Python version(s) for build and JSON for matrix jobs"
# Note: build version is the most recent/latest Python

# Primary extraction method uses 'requires-python' from pyproject.toml
# This brings alignment with actions/setup-python behavior
# e.g. requires-python = ">=3.10" extracts supported versions 3.10, 3.11,
# 3.12, 3.13
# Falls back to 'Programming Language :: Python ::' classifiers if
# requires-python not found

inputs:
  # Mandatory
  path_prefix:
    description: "Directory location containing project code"
    required: false
  network_timeout:
    description: "Network timeout in seconds for API calls"
    required: false
    default: '10'
  max_retries:
    description: "Maximum number of retry attempts for API calls"
    required: false
    default: '2'

outputs:
  build_python:
    description: "Most recent Python version supported by project"
    value: "${{ steps.parse.outputs.build_python }}"
  matrix_json:
    description: "All Python versions supported by project as JSON string"
    # Example: matrix_json = {"python-version": ["3.10", "3.11"]}
    value: "${{ steps.parse.outputs.matrix_json }}"

runs:
  using: "composite"
  steps:
    - name: "Setup and validate environment"
      shell: "bash"
      run: |
        set -x
        # Setup and validate environment
        path_prefix="${{ inputs.path_prefix }}"
        path_prefix="${path_prefix:-'.'}"
        path_prefix="${path_prefix%/}"

        # Validate directory and pyproject.toml existence
        if [[ ! -d "$path_prefix" ]]; then
          echo 'Error: invalid path/prefix to project directory ❌'
          exit 1
        fi

        if [[ ! -f "$path_prefix/pyproject.toml" ]]; then
          echo 'Error: missing pyproject.toml file ❌'
          exit 1
        fi

        echo "path_prefix=$path_prefix" >> "$GITHUB_ENV"
        echo "network_timeout=${{ inputs.network_timeout }}" >> "$GITHUB_ENV"
        echo "max_retries=${{ inputs.max_retries }}" >> "$GITHUB_ENV"

    - name: "Fetch supported Python versions with EOL awareness"
      shell: "bash"
      run: |
        set -x
        # Fetch supported Python versions with EOL awareness
        set -o pipefail

        # Configuration
        TIMEOUT="${{ env.network_timeout }}"
        RETRIES="${{ env.max_retries }}"

        # Source shared EOL utility functions
        # shellcheck source=lib/eol_utils.sh
        source "$GITHUB_ACTION_PATH/lib/eol_utils.sh"

        # Source shared constraint parsing utilities
        # shellcheck source=lib/constraint_utils.sh
        source "$GITHUB_ACTION_PATH/lib/constraint_utils.sh"

        # Main version fetching logic
        echo 'Fetching valid/supported Python versions'

        if PYTHON_VERSIONS=$(fetch_eol_aware_versions \
          "$TIMEOUT" "$RETRIES"); then
          echo "all_supported_versions=$PYTHON_VERSIONS" >> "$GITHUB_ENV"
          echo 'versions_source=dynamic-eol-aware' >> "$GITHUB_ENV"
        else
          echo "⚠️  API unavailable, using static fallback versions"
          STATIC_VERSIONS=$(get_static_python_versions)
          echo "all_supported_versions=$STATIC_VERSIONS" >> "$GITHUB_ENV"
          echo 'versions_source=static' >> "$GITHUB_ENV"
        fi

    - name: "Extract Python version constraints"
      shell: "bash"
      run: |
        set -x
        # Extract Python version constraints from pyproject.toml
        PYPROJECT_FILE="${{ env.path_prefix }}/pyproject.toml"

        # Source shared constraint parsing utilities
        # shellcheck source=lib/constraint_utils.sh
        source "$GITHUB_ACTION_PATH/lib/constraint_utils.sh"

        # Extract requires-python constraint using shared utility
        if REQUIRES_PYTHON=$(extract_requires_python_constraint \
          "$PYPROJECT_FILE"); then
          echo "📋 Found requires-python constraint: $REQUIRES_PYTHON"
          echo "requires_python=$REQUIRES_PYTHON" >> "$GITHUB_ENV"
        else
          echo "requires_python=" >> "$GITHUB_ENV"
        fi

        # Extract classifiers fallback using shared utility
        if CLASSIFIERS=$(extract_classifiers_fallback "$PYPROJECT_FILE"); then
          echo "📋 Found Programming Language classifiers: $CLASSIFIERS"
          echo "classifiers=$CLASSIFIERS" >> "$GITHUB_ENV"
        else
          echo "classifiers=" >> "$GITHUB_ENV"
        fi

        # Check if any constraints were found
        if [[ -z "$REQUIRES_PYTHON" && -z "$CLASSIFIERS" ]]; then
          echo "⚠️  No Python version constraints found"
        fi

    - id: parse
      name: "Process and determine supported Python versions"
      shell: "bash"
      run: |
        set -x
        # Process and transform extracted Python versions using shared utilities
        set -o pipefail

        ALL_SUPPORTED_VERSIONS="${{ env.all_supported_versions }}"
        VERSIONS_SOURCE="${{ env.versions_source }}"
        PYPROJECT_FILE="${{ env.path_prefix }}/pyproject.toml"

        # Source shared constraint parsing utilities
        # shellcheck source=lib/constraint_utils.sh
        source "$GITHUB_ACTION_PATH/lib/constraint_utils.sh"

        # Use shared utility to process Python constraints
        if PYTHON_VERSIONS=$(process_python_constraints "$PYPROJECT_FILE" \
                           "$ALL_SUPPORTED_VERSIONS"); then
          echo "🔍 Processed Python version constraints successfully"
        else
          echo "❌ Failed to determine Python versions from constraints"
          exit 1
        fi

        # Generate build version and matrix JSON using shared utilities
        if BUILD_PYTHON=$(get_build_version "$PYTHON_VERSIONS"); then
          echo "🐍 Build Python determined: $BUILD_PYTHON"
        else
          echo "❌ Failed to determine build Python version"
          exit 1
        fi

        if MATRIX_JSON=$(generate_matrix_json "$PYTHON_VERSIONS"); then
          echo "🔧 Matrix JSON generated successfully"
        else
          echo "❌ Failed to generate matrix JSON"
          exit 1
        fi

        # Final validation using shared utilities
        if ! validate_version_format "$PYTHON_VERSIONS"; then
          echo "❌ Invalid version format detected in: $PYTHON_VERSIONS"
          exit 1
        fi

        if ! validate_json_format "$MATRIX_JSON"; then
          echo "❌ Generated invalid JSON format"
          exit 1
        fi

        # Set outputs
        echo "build_python=$BUILD_PYTHON" >> "$GITHUB_OUTPUT"
        echo "matrix_json=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

        # Final clean output
        echo "✅ Python version analysis complete"
        echo "🐍 Build Python: $BUILD_PYTHON"
        echo "📊 Supported versions: $PYTHON_VERSIONS"
        echo "🔧 Matrix JSON: $MATRIX_JSON"
